#include sha1_do_block.spp

#define sha1_init
{
#pointer to message
@message = $a0
#length of message in bits, high part
@hlength = $a1
#length of message in bits, low part
@llength = $a2

    sll     $t0, @message, 30       #$t0 CONTAINS 0 if the message is word aligned
    sltu    $v0, $0, $t0			#If not word aligned, set error code
    bne     $v0, $0, sha1_end			#Give up if not word aligned

	sw 		$s7, -4($fp)
	sw		$s6, -8($fp)
	sw		$s5, -12($fp)
	sw		$s4, -16($fp)
	sw		$s3, -20($fp)
	sw		$s2, -24($fp)
	sw		$s1, -28($fp)
	sw		$s0, -32($fp)

	sw		$a2, -36($fp)		#We can go ahead and store the length on the stack now
	sw		$a1, -40($fp)
	
	sll     @hlength, @hlength, 23
	srl		$t0, @llength, 9
	or      @hlength, @hlength, $t0
	sll		@hlength, @hlength, 6
	addu	@hlength, @hlength, @message	#We are now using $a1 to store the location of the last block

	sll		@llength, @llength, 23
	srl		@llength, @llength, 23			#and we are using $a2 to store the bits count in the last block
	
	sltiu	$t0, @llength, 448				#If we have fewer than 448 bits, then we can give 512 bits of stack back
	sll		$t0, $t0, 6
	addu	$sp, $sp, $t0
}
#end

#define sha1_copy
{
@message	= $a0
@last		= $a1
@bits		= $a2

@dstitr  = $t0
@srcitr  = $t1
@limit   = $t2
@temp	 = $t3

	addiu	@dstitr, $sp, 40			#This allows us to stop writing at @dstitr == -40($fp)

	beq		@bits, $0, copy_done		#Skip copying if we have no extra bits laying around
	
	move	@srcitr, @last
	move	@limit, @bits

copy_loop:
	lw		@temp, 0(@srcitr)
	sw		@temp, -40(@dstitr)
	addiu	@limit, @limit, -32
	addiu	@srcitr, @srcitr, 4
	addiu	@dstitr, @dstitr, 4
	bgtz	@limit, copy_loop

copy_done:
	beq		@dstitr, $fp, zero_done
	
zero_loop:
	sw		$0, -40(@dstitr)
	addiu	@dstitr, @dstitr, 4
	bne		@dstitr, $fp, zero_loop
	
zero_done:
}
#end

#define sha1_pad
{
@bits		= $a2
@pad_addr	= $t0
@pad_data	= $t1
@pad_temp	= $t2

	srl		@pad_addr, @bits, 5			#Divide bits by 32 to get the word
	sll		@pad_addr, @pad_addr, 2			#Multiply by 4 to get the number of bytes
	addu	@pad_addr, @pad_addr, $sp		#Position of the word where the message ends
	
	sll		@bits, @bits, 27
	srl		@bits, @bits, 27
	
	lw		@pad_data, 0(@pad_addr)
	
	lui		@pad_temp, 0x8000
	srlv	@pad_temp, @pad_temp, @bits
	or		@pad_data, @pad_data, @pad_temp		#Pad with a 1 bit
	
	lui		@pad_temp, 0x8000
	srav	@pad_temp, @pad_temp, @bits
	and		@pad_data, @pad_data, @pad_temp		#Zero all of the other bits in the word
	
	sw		@pad_data, 0(@pad_addr)
}
#end

sha1:
	sw		$ra, -4($sp)
	sw		$fp, -8($sp)
	addiu	$fp, $sp, -8
	addiu	$sp, $fp, -160		#Allocate myself 8 words + 2 * 512 bits = 160 bytes on the stack

	sha1_init
	sha1_copy
	sha1_pad
	
	li		$t0, 0x67452301
	li		$t1, 0xEFCDAB89
	li		$t2, 0x98BADCFE
	li		$t3, 0x10325476
	li		$t4, 0xC3D2E1F0
	
	@message	= $a0
	@last		= $a1
	@temp		= $t5
	
	beq		@message, @last, sha1_process_last_blocks
	
	jal		sha1_do_block

	addiu	@message, @message, 64
	bne		@message, @last, sha1_do_block

sha1_process_last_blocks:
	move	@message, $sp
	jal		sha1_do_block
	
	addiu	@message, @message, 64
	addiu	@temp, @message, 32
	bne		@temp, $fp, sha1_do_block
	
sha1_end:
	lw		$ra, 4($fp)
	move	$sp, $fp
	lw		$fp, 0($fp)
	
	jr		$ra