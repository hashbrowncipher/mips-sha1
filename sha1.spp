#include sha1_do_block.spp

#define sha1
{
	sw		$fp, -4($sp)		#Push the frame pointer onto the stack
	addiu	$fp, $sp, -4		#Set a new frame pointer
	addiu	$sp, $fp, -160		#Allocate myself 8 words + 2 * 512 bits = 160 bytes on the stack

#pointer to message
@message = $a0
#length of message in bits, high part
@hlength = $a1
#length of message in bits, low part
@llength = $a2

    sll     $t0, @message, 30       #$t0 CONTAINS 0 if the message is word aligned
    sltu    $v0, $0, $t0			#If not word aligned, set error code
    bne     $v0, $0, end			#Give up if not word aligned

	sw 		$s7, -4($fp)
	sw		$s6, -8($fp)
	sw		$s5, -12($fp)
	sw		$s4, -16($fp)
	sw		$s3, -20($fp)
	sw		$s2, -24($fp)
	sw		$s1, -28($fp)
	sw		$s0, -32($fp)

	sw		$a2, -36($fp)		#We can go ahead and store the length on the stack now
	sw		$a1, -40($fp)

@blocks     = $t0
@bits       = $t1
	
	sll     $t0, @hlength, 23
	srl		$t1, @llength, 9
	or      @blocks, $t1, $t0

	sll		$t1, @llength, 23
	srl		@bits, $t1, 23

	#TODO: We may be able to get rid of $a1 and $a2 now
	sltiu	$t2, $t1, 448			#If we have fewer than 448 bits, then we can give 512 bits of stack back
	sll		$t2, $t2, 6
	addu	$sp, $sp, $t2

{
@dstitr = $t3
@srcitr = $t4
@limit  = $t5
@temp	= $t6

	add		@dstitr, $sp, 40			#This allows us to stop writing at @dstitr == -40($fp)

	beq		@bits, $0, copy_done		#Skip copying if we have no extra bits laying around
	
	move	@limit, @bits

	sll		@srcitr, @blocks, 6			#Number of bytes to the last block
	add		@srcitr, @srcitr, @message	#Address of last block

copy_loop:
	lw		@temp, 0(@srcitr)
	sw		@temp, -40(@dstitr)
	addi	@limit, @limit, -32
	addi	@srcitr, @srcitr, 4
	addi	@dstitr, @dstitr, 4
	bgtz	@limit, copy_loop

copy_done:
	beq		@dstitr, $fp, zero_done
	
zero_loop:
	sw		$0, -40(@dstitr)
	addi	@dstitr, @dstitr, 4
	bne		@dstitr, $fp, zero_loop
	
zero_done:
}

#Pad the data

@pad_addr = $t7
@pad_data = $t8
@pad_temp = $t9
	srl		@pad_addr, @bits, 5			#Divide bits by 32 to get the word
	sll		@pad_addr, @pad_addr, 2			#Multiply by 4 to get the number of bytes
	addu	@pad_addr, @pad_addr, $sp		#Position of the word where the message ends
	
	sll		@bits, @bits, 27
	srl		@bits, @bits, 27
	
	lw		@pad_data, 0(@pad_addr)
	
	lui		@pad_temp, 0x8000
	srlv	@pad_temp, @pad_temp, @bits
	or		@pad_data, @pad_data, @pad_temp		#Pad with a 1 bit
	
	lui		@pad_temp, 0x8000
	srav	@pad_temp, @pad_temp, @bits
	and		@pad_data, @pad_data, @pad_temp		#Zero all of the other bits in the word
	
	sw		@pad_data, 0(@pad_addr)
}
	move	$a0, $sp
	
	
	li		$t0, 0x67452301
	li		$t1, 0xEFCDAB89
	li		$t2, 0x98BADCFE
	li		$t3, 0x10325476
	li		$t4, 0xC3D2E1F0

	sha1_do_block
	
	
	
	
end:
#end